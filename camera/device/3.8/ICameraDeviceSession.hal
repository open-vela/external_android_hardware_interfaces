/*
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.camera.device@3.8;

import android.hardware.camera.common@1.0::Status;
import @3.5::StreamConfiguration;
import @3.7::ICameraDeviceSession;
import @3.6::HalStreamConfiguration;

/**
 * Camera device active session interface.
 *
 * Obtained via ICameraDevice::open(), this interface contains the methods to
 * configure and request captures from an active camera device.
 */
interface ICameraDeviceSession extends @3.7::ICameraDeviceSession {
    /**
     * configureStreams_3_8:
     *
     * Identical to @3.7::ICameraDeviceSession.configureStreams_3_7, except that:
     *
     * - The requestedConfiguration allows the camera framework to configure
     *   10-bit dynamic range profile.
     *
     * @return status Status code for the operation, one of:
     *     OK:
     *         On successful stream configuration.
     *     INTERNAL_ERROR:
     *         If there has been a fatal error and the device is no longer
     *         operational. Only close() can be called successfully by the
     *         framework after this error is returned.
     *     ILLEGAL_ARGUMENT:
     *         If the requested stream configuration is invalid. Some examples
     *         of invalid stream configurations include:
     *           - Including more than 1 INPUT stream
     *           - Not including any OUTPUT streams
     *           - Including streams with unsupported formats, or an unsupported
     *             size for that format.
     *           - Including too many output streams of a certain format.
     *           - Unsupported rotation configuration
     *           - Stream sizes/formats don't satisfy the
     *             StreamConfigurationMode requirements
     *             for non-NORMAL mode, or the requested operation_mode is not
     *             supported by the HAL.
     *           - Unsupported usage flag
     *           - Unsupported stream groupIds, or unsupported multi-resolution
     *             input stream.
     *           - Invalid combination between a 10-bit dynamic range profile
     *             and none impl. defined 8-bit format for a particular stream.
     *         The camera service cannot filter out all possible illegal stream
     *         configurations, since some devices may support more simultaneous
     *         streams or larger stream resolutions than the minimum required
     *         for a given camera device hardware level. The HAL must return an
     *         ILLEGAL_ARGUMENT for any unsupported stream set, and then be
     *         ready to accept a future valid stream configuration in a later
     *         configureStreams call.
     * @return halConfiguration The stream parameters desired by the HAL for
     *     each stream, including maximum buffers, the usage flags, and the
     *     override format and dataspace.
     */
    configureStreams_3_8(StreamConfiguration requestedConfiguration)
        generates (Status status, @3.6::HalStreamConfiguration halConfiguration);

    /**
     * repeatingRequestEnd:
     *
     * Notification about the last frame number in a repeating request along with the
     * ids of all streams included in the repeating request.
     *
     * This can be called at any point after 'processCaptureRequest' in response
     * to camera clients disabling an active repeating request.
     *
     * Performance requirements:
     * The call must not be blocked for extensive periods and should be extremely lightweight. There
     * must be no frame rate degradation or frame jitter introduced.
     *
     * This method must always succeed, even if the device has encountered a
     * serious error.
     */
    repeatingRequestEnd(uint32_t frameNumber, vec<int32_t> streamIds);
};
